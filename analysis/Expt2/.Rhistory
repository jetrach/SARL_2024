ggplot(summary_cv_medSplit_posRPEnegRPE_detrend, aes(x = order, y = cv))+geom_point()+geom_errorbar(aes(ymin = cv-se, ymax = cv+se, width = 0))+
theme(axis.line=element_line(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", colour = "black")
,panel.border = element_rect(fill = NA, colour = "white"))
#ggsave('cv_detrend_medsplit.eps')
ggplot(summary_accu_medSplit_posRPEnegRPE_detrend, aes(x = order, y = accu))+geom_point()+geom_errorbar(aes(ymin = accu-se, ymax = accu+se, width = 0))+
theme(axis.line=element_line(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", colour = "black")
,panel.border = element_rect(fill = NA, colour = "white"))
#ggsave('accu_detrend_medsplit.eps')
accucv_medSplit_negRPE_detrend$order = NA
accucv_medSplit_negRPE$order = NA
accucv_medSplit_negRPE$order[accucv_medSplit_negRPE$medSplit ==1] = 'a_largeneg'
accucv_medSplit_negRPE$order[accucv_medSplit_negRPE$medSplit ==2] = 'b_smallneg'
accucv_medSplit_posRPE$order = NA
accucv_medSplit_posRPE$order[accucv_medSplit_posRPE$medSplit ==1] = 'c_smallpos'
accucv_medSplit_posRPE$order[accucv_medSplit_posRPE$medSplit ==2] = 'd_largepos'
accucv_medSplit_posRPEnegRPE_detrend = rbind(accucv_medSplit_posRPE, accucv_medSplit_negRPE)
summary_accu_medSplit_posRPEnegRPE_detrend = Rmics::summarySEwithin(data.frame(accucv_medSplit_posRPEnegRPE_detrend), measurevar = 'accu_detrend',withinvars = c('order'), idvar = 'subject')
summary_cv_medSplit_posRPEnegRPE_detrend = Rmics::summarySEwithin(data.frame(accucv_medSplit_posRPEnegRPE_detrend), measurevar = 'cv_detrend',withinvars = c('order'), idvar = 'subject')
ggplot(summary_cv_medSplit_posRPEnegRPE_detrend, aes(x = order, y = cv_detrend))+geom_point()+geom_errorbar(aes(ymin = cv_detrend-se, ymax = cv_detrend+se, width = 0))+
theme(axis.line=element_line(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", colour = "black")
,panel.border = element_rect(fill = NA, colour = "white"))
#ggsave('cv_detrend_detrend_medsplit.eps')
ggplot(summary_accu_medSplit_posRPEnegRPE_detrend, aes(x = order, y = accu_detrend))+geom_point()+geom_errorbar(aes(ymin = accu_detrend-se, ymax = accu_detrend+se, width = 0))+
theme(axis.line=element_line(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", colour = "black")
,panel.border = element_rect(fill = NA, colour = "white"))
#ggsave('accu_detrend_medsplit.eps')
accucv_medSplit_negRPE$order = NA
accucv_medSplit_negRPE$order[accucv_medSplit_negRPE$medSplit ==1] = 'a_largeneg'
accucv_medSplit_negRPE$order[accucv_medSplit_negRPE$medSplit ==2] = 'b_smallneg'
accucv_medSplit_posRPE$order = NA
accucv_medSplit_posRPE = rlData_noNan %>% filter(RPE_2alpha > 0) %>% group_by(subject) %>% mutate(medSplit = split_quantile(RPE_2alpha,2)) %>%group_by(subject,medSplit) %>% dplyr::summarise(accu = mean(accuracy_infreq,na.rm = TRUE), cv = mean(coefVar, na.rm = TRUE),accu_detrend = mean(accuracy_infreq_detrend,na.rm = TRUE), cv_detrend = mean(coefVar_detrend, na.rm = TRUE))
accucv_medSplit_posRPE_wide = accucv_medSplit_posRPE %>% pivot_wider(names_from = medSplit, values_from = c(accu, cv)) %>% mutate(deltaAccu = accu_1-accu_2, deltaCV = cv_1-cv_2)
ggplot(accucv_medSplit_posRPE, aes(x = medSplit, y = accu))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
ggplot(accucv_medSplit_posRPE, aes(x = medSplit, y = cv))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
t.test(accucv_medSplit_posRPE$accu[accucv_medSplit_posRPE$medSplit==1],accucv_medSplit_posRPE$accu[accucv_medSplit_posRPE$medSplit==2], paired = TRUE)
t.test(accucv_medSplit_posRPE$cv[accucv_medSplit_posRPE$medSplit==1],accucv_medSplit_posRPE$cv[accucv_medSplit_posRPE$medSplit==2], paired = TRUE)
# detrended
ggplot(accucv_medSplit_posRPE, aes(x = medSplit, y = accu_detrend))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
ggplot(accucv_medSplit_posRPE, aes(x = medSplit, y = cv_detrend))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
t.test(accucv_medSplit_posRPE$accu_detrend[accucv_medSplit_posRPE$medSplit==1],accucv_medSplit_posRPE$accu_detrend[accucv_medSplit_posRPE$medSplit==2], paired = TRUE)
t.test(accucv_medSplit_posRPE$cv_detrend[accucv_medSplit_posRPE$medSplit==1],accucv_medSplit_posRPE$cv_detrend[accucv_medSplit_posRPE$medSplit==2], paired = TRUE)
accucv_medSplit_posRPE$order = NA
accucv_medSplit_posRPE$order[accucv_medSplit_posRPE$medSplit ==1] = 'c_smallpos'
accucv_medSplit_posRPE$order[accucv_medSplit_posRPE$medSplit ==2] = 'd_largepos'
accucv_medSplit_posRPEnegRPE_detrend = rbind(accucv_medSplit_posRPE, accucv_medSplit_negRPE)
summary_accu_medSplit_posRPEnegRPE_detrend = Rmics::summarySEwithin(data.frame(accucv_medSplit_posRPEnegRPE_detrend), measurevar = 'accu_detrend',withinvars = c('order'), idvar = 'subject')
summary_accu_medSplit_posRPEnegRPE_detrend = Rmisc::summarySEwithin(data.frame(accucv_medSplit_posRPEnegRPE_detrend), measurevar = 'accu_detrend',withinvars = c('order'), idvar = 'subject')
summary_cv_medSplit_posRPEnegRPE_detrend = Rmisc::summarySEwithin(data.frame(accucv_medSplit_posRPEnegRPE_detrend), measurevar = 'cv_detrend',withinvars = c('order'), idvar = 'subject')
ggplot(summary_cv_medSplit_posRPEnegRPE_detrend, aes(x = order, y = cv_detrend))+geom_point()+geom_errorbar(aes(ymin = cv_detrend-se, ymax = cv_detrend+se, width = 0))+
theme(axis.line=element_line(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", colour = "black")
,panel.border = element_rect(fill = NA, colour = "white"))
accucv_medSplit_negRPE$order = NA
accucv_medSplit_negRPE$order[accucv_medSplit_negRPE$medSplit ==1] = 'a_largeneg'
accucv_medSplit_negRPE$order[accucv_medSplit_negRPE$medSplit ==2] = 'b_smallneg'
accucv_medSplit_posRPE$order = NA
accucv_medSplit_posRPE$order[accucv_medSplit_posRPE$medSplit ==1] = 'c_smallpos'
accucv_medSplit_posRPE$order[accucv_medSplit_posRPE$medSplit ==2] = 'd_largepos'
accucv_medSplit_posRPEnegRPE_detrend = rbind(accucv_medSplit_posRPE, accucv_medSplit_negRPE)
summary_accu_medSplit_posRPEnegRPE_detrend = Rmisc::summarySEwithin(data.frame(accucv_medSplit_posRPEnegRPE_detrend), measurevar = 'accu_detrend',withinvars = c('order'), idvar = 'subject')
summary_cv_medSplit_posRPEnegRPE_detrend = Rmisc::summarySEwithin(data.frame(accucv_medSplit_posRPEnegRPE_detrend), measurevar = 'cv_detrend',withinvars = c('order'), idvar = 'subject')
ggplot(summary_cv_medSplit_posRPEnegRPE_detrend, aes(x = order, y = cv_detrend))+geom_point()+geom_errorbar(aes(ymin = cv_detrend-se, ymax = cv_detrend+se, width = 0))+
theme(axis.line=element_line(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", colour = "black")
,panel.border = element_rect(fill = NA, colour = "white"))
#ggsave('cv_detrend_detrend_medsplit.eps')
ggplot(summary_accu_medSplit_posRPEnegRPE_detrend, aes(x = order, y = accu_detrend))+geom_point()+geom_errorbar(aes(ymin = accu_detrend-se, ymax = accu_detrend+se, width = 0))+
theme(axis.line=element_line(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", colour = "black")
,panel.border = element_rect(fill = NA, colour = "white"))
#ggsave('accu_detrend_medsplit.eps')
accucv_medSplit_negreward = rlData_noNan %>% filter(reward <= 0) %>% group_by(subject) %>% mutate(medSplit = split_quantile(RPE_2alpha,2)) %>%group_by(subject,medSplit) %>% dplyr::summarise(accu = mean(accuracy_infreq,na.rm = TRUE), cv = mean(coefVar, na.rm = TRUE),accu_detrend = mean(accuracy_infreq_detrend,na.rm = TRUE), cv_detrend = mean(coefVar_detrend, na.rm = TRUE))
accucv_medSplit_negreward_wide = accucv_medSplit_negreward %>% pivot_wider(names_from = medSplit, values_from = c(accu, cv, accu_detrend, cv_detrend)) %>% mutate(deltaAccu = accu_1-accu_2, deltaCV = cv_1-cv_2,deltaAccu_detrend = accu_detrend_1-accu_detrend_2, deltaCV_detrend = cv_detrend_1-cv_detrend_2)
sum(accucv_medSplit_negreward_wide$deltaAccu>0)
sum(accucv_medSplit_negreward_wide$deltaCV>0)
sum(accucv_medSplit_negreward_wide$deltaAccu_detrend>0)
sum(accucv_medSplit_negreward_wide$deltaCV_detrend>0)
ggplot(accucv_medSplit_negreward, aes(x = medSplit, y = accu))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
ggplot(accucv_medSplit_negreward, aes(x = medSplit, y = cv))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
ggplot(accucv_medSplit_negreward, aes(x = medSplit, y = accu_detrend))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
ggplot(accucv_medSplit_negreward, aes(x = medSplit, y = cv_detrend))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
t.test(accucv_medSplit_negreward$accu[accucv_medSplit_negreward$medSplit==1],accucv_medSplit_negreward$accu[accucv_medSplit_negreward$medSplit==2], paired = TRUE)
t.test(accucv_medSplit_negreward$cv[accucv_medSplit_negreward$medSplit==1],accucv_medSplit_negreward$cv[accucv_medSplit_negreward$medSplit==2], paired = TRUE)
t.test(accucv_medSplit_negreward$accu_detrend[accucv_medSplit_negreward$medSplit==1],accucv_medSplit_negreward$accu_detrend[accucv_medSplit_negreward$medSplit==2], paired = TRUE)
t.test(accucv_medSplit_negreward$cv_detrend[accucv_medSplit_negreward$medSplit==1],accucv_medSplit_negreward$cv_detrend[accucv_medSplit_negreward$medSplit==2], paired = TRUE)
accucv_medSplit_posreward = rlData_noNan %>% filter(reward > 0) %>% group_by(subject) %>% mutate(medSplit = split_quantile(RPE_2alpha,2)) %>%group_by(subject,medSplit) %>% dplyr::summarise(accu = mean(accuracy_infreq,na.rm = TRUE), cv = mean(coefVar, na.rm = TRUE),accu_detrend = mean(accuracy_infreq_detrend,na.rm = TRUE), cv_detrend = mean(coefVar_detrend, na.rm = TRUE))
accucv_medSplit_posreward_wide = accucv_medSplit_posreward %>% pivot_wider(names_from = medSplit, values_from = c(accu, cv, accu_detrend, cv_detrend)) %>% mutate(deltaAccu = accu_1-accu_2, deltaCV = cv_1-cv_2,deltaAccu_detrend = accu_detrend_1-accu_detrend_2, deltaCV_detrend = cv_detrend_1-cv_detrend_2)
sum(accucv_medSplit_posreward_wide$deltaAccu>0)
sum(accucv_medSplit_posreward_wide$deltaCV>0)
sum(accucv_medSplit_posreward_wide$deltaAccu_detrend>0)
sum(accucv_medSplit_posreward_wide$deltaCV_detrend>0)
ggplot(accucv_medSplit_posreward, aes(x = medSplit, y = accu))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
ggplot(accucv_medSplit_posreward, aes(x = medSplit, y = cv))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
ggplot(accucv_medSplit_posreward, aes(x = medSplit, y = accu_detrend))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
ggplot(accucv_medSplit_posreward, aes(x = medSplit, y = cv_detrend))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
t.test(accucv_medSplit_posreward$accu[accucv_medSplit_posreward$medSplit==1],accucv_medSplit_posreward$accu[accucv_medSplit_posreward$medSplit==2], paired = TRUE)
t.test(accucv_medSplit_posreward$cv[accucv_medSplit_posreward$medSplit==1],accucv_medSplit_posreward$cv[accucv_medSplit_posreward$medSplit==2], paired = TRUE)
t.test(accucv_medSplit_posreward$accu_detrend[accucv_medSplit_posreward$medSplit==1],accucv_medSplit_posreward$accu_detrend[accucv_medSplit_posreward$medSplit==2], paired = TRUE)
t.test(accucv_medSplit_posreward$cv_detrend[accucv_medSplit_posreward$medSplit==1],accucv_medSplit_posreward$cv_detrend[accucv_medSplit_posreward$medSplit==2], paired = TRUE)
accucv_medSplit_negreward$order = NA
accucv_medSplit_negreward$order[accucv_medSplit_negreward$medSplit ==1] = 'a_largenegrew'
accucv_medSplit_negreward$order[accucv_medSplit_negreward$medSplit ==2] = 'b_smallnegrew'
accucv_medSplit_posreward$order = NA
accucv_medSplit_posreward$order[accucv_medSplit_posreward$medSplit ==1] = 'c_smallposrew'
accucv_medSplit_posreward$order[accucv_medSplit_posreward$medSplit ==2] = 'd_largeposrew'
accucv_medSplit_posnegreward_detrend = rbind(accucv_medSplit_posreward, accucv_medSplit_negreward)
summary_accu_medSplit_posnegreward_detrend = Rmisc::summarySEwithin(data.frame(accucv_medSplit_posnegreward_detrend), measurevar = 'accu_detrend',withinvars = c('order'), idvar = 'subject')
summary_cv_medSplit_posnegreward_detrend = Rmisc::summarySEwithin(data.frame(accucv_medSplit_posnegreward_detrend), measurevar = 'cv_detrend',withinvars = c('order'), idvar = 'subject')
ggplot(summary_cv_medSplit_posnegreward_detrend, aes(x = order, y = cv_detrend))+geom_point()+geom_errorbar(aes(ymin = cv_detrend-se, ymax = cv_detrend+se, width = 0))+
theme(axis.line=element_line(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", colour = "black")
,panel.border = element_rect(fill = NA, colour = "white"))
#ggsave('cv_detrend_medsplit_splitreward.eps')
ggplot(summary_accu_medSplit_posnegreward_detrend, aes(x = order, y = accu_detrend))+geom_point()+geom_errorbar(aes(ymin = accu_detrend-se, ymax = accu_detrend+se, width = 0))+
theme(axis.line=element_line(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", colour = "black")
,panel.border = element_rect(fill = NA, colour = "white"))
#ggsave('accu_detrend_medsplit_splitreward.eps')
accucv_medSplit_posreward = rlData_noNan %>% filter(reward > 0) %>% group_by(subject) %>% mutate(medSplit = split_quantile(RPE_2alpha,2)) %>%group_by(subject,medSplit) %>% dplyr::summarise(accu = mean(accuracy_infreq,na.rm = TRUE), cv = mean(coefVar, na.rm = TRUE),accu_detrend = mean(accuracy_infreq_detrend,na.rm = TRUE), cv_detrend = mean(coefVar_detrend, na.rm = TRUE))
#raw
ggplot(accucv_medSplit_posreward, aes(x = medSplit, y = accu))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
ggplot(accucv_medSplit_posreward, aes(x = medSplit, y = cv))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
t.test(accucv_medSplit_posreward$accu[accucv_medSplit_posreward$medSplit==1],accucv_medSplit_posreward$accu[accucv_medSplit_posreward$medSplit==2], paired = TRUE)
t.test(accucv_medSplit_posreward$cv[accucv_medSplit_posreward$medSplit==1],accucv_medSplit_posreward$cv[accucv_medSplit_posreward$medSplit==2], paired = TRUE)
# detrended
ggplot(accucv_medSplit_posreward, aes(x = medSplit, y = accu_detrend))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
ggplot(accucv_medSplit_posreward, aes(x = medSplit, y = cv_detrend))+geom_bar(stat = 'summary', fun.y = 'mean') + geom_point()
t.test(accucv_medSplit_posreward$accu_detrend[accucv_medSplit_posreward$medSplit==1],accucv_medSplit_posreward$accu_detrend[accucv_medSplit_posreward$medSplit==2], paired = TRUE)
t.test(accucv_medSplit_posreward$cv_detrend[accucv_medSplit_posreward$medSplit==1],accucv_medSplit_posreward$cv_detrend[accucv_medSplit_posreward$medSplit==2], paired = TRUE)
accucv_medSplit_negreward$order = NA
accucv_medSplit_negreward$order[accucv_medSplit_negreward$medSplit ==1] = 'a_largenegrew'
accucv_medSplit_negreward$order[accucv_medSplit_negreward$medSplit ==2] = 'b_smallnegrew'
accucv_medSplit_posreward$order = NA
accucv_medSplit_posreward$order[accucv_medSplit_posreward$medSplit ==1] = 'c_smallposrew'
accucv_medSplit_posreward$order[accucv_medSplit_posreward$medSplit ==2] = 'd_largeposrew'
accucv_medSplit_posnegreward_detrend = rbind(accucv_medSplit_posreward, accucv_medSplit_negreward)
summary_accu_medSplit_posnegreward_detrend = Rmisc::summarySEwithin(data.frame(accucv_medSplit_posnegreward_detrend), measurevar = 'accu_detrend',withinvars = c('order'), idvar = 'subject')
summary_cv_medSplit_posnegreward_detrend = Rmisc::summarySEwithin(data.frame(accucv_medSplit_posnegreward_detrend), measurevar = 'cv_detrend',withinvars = c('order'), idvar = 'subject')
ggplot(summary_cv_medSplit_posnegreward_detrend, aes(x = order, y = cv_detrend))+geom_point()+geom_errorbar(aes(ymin = cv_detrend-se, ymax = cv_detrend+se, width = 0))+
theme(axis.line=element_line(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", colour = "black")
,panel.border = element_rect(fill = NA, colour = "white"))
#ggsave('cv_detrend_medsplit_splitreward.eps')
ggplot(summary_accu_medSplit_posnegreward_detrend, aes(x = order, y = accu_detrend))+geom_point()+geom_errorbar(aes(ymin = accu_detrend-se, ymax = accu_detrend+se, width = 0))+
theme(axis.line=element_line(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", colour = "black")
,panel.border = element_rect(fill = NA, colour = "white"))
#ggsave('accu_detrend_medsplit_splitreward.eps')
mean(attentionmetrics$correlSA_detrend)
sd(attentionmetrics$correlSA_detrend)
mean(attentionmetrics$correlSA_detrend)
t.test(attentionmetrics$correlSA_detrend, mu = 0)
# Correlation between attention metrics
attentionmetrics = rlData_noNan %>%filter(!is.na(accuracy_infreq), !is.na(coefVar))%>% group_by(subject) %>% dplyr::summarise(correlSA = cor(accuracy_infreq,coefVar),correlSA_detrend = cor(accuracy_infreq_detrend,coefVar_detrend,method = 'spearman'))
mean(attentionmetrics$correlSA_detrend)
length(unique(rlData_noNan$subject))
# Correlation between attention metrics
attentionmetrics = rlData_noNan %>%filter(!is.na(accuracy_infreq), !is.na(coefVar))%>% group_by(subject) %>% dplyr::summarise(correlSA = cor(accuracy_infreq,coefVar),correlSA_detrend = cor(accuracy_infreq_detrend,coefVar_detrend))
mean(attentionmetrics$correlSA)
mean(attentionmetrics$correlSA_detrend)
shapiro.test(rlData_noNan$accuracy_infreq_detrend)
length(rlData_noNan$accuracy_infreq_detrend)
# Correlation between attention metrics
attentionmetrics = rlData_noNan %>%filter(!is.na(accuracy_infreq), !is.na(coefVar))%>% group_by(subject) %>% dplyr::summarise(correlSA = cor(accuracy_infreq,coefVar),correlSA_detrend = cor(accuracy_infreq_detrend,coefVar_detrend))
mean(attentionmetrics$correlSA)
mean(attentionmetrics$correlSA_detrend)
sd(attentionmetrics$correlSA)
sd(attentionmetrics$correlSA_detrend)
ggplot(attentionmetrics, aes(x = subject, y = correlSA))+geom_point()+geom_hline(yintercept = 0, color = 'red')+ggtitle('correlation between raw attention metrics by subject')
ggplot(attentionmetrics, aes(x = subject, y = correlSA_detrend))+geom_point()+geom_hline(yintercept = 0, color = 'red')+ggtitle('correlation between detrended attention metrics by subject')
t.test(attentionmetrics$correlSA_detrend, mu = 0)
mean(attentionmetrics$correlSA)
sd(attentionmetrics$correlSA)
t.test(attentionmetrics$correlSA, mu = 0)
accuxblocksTOT = rlData_noNan %>% group_by(blockNum) %>% filter(!is.na(accuracy_infreq),!is.na(coefVar)) %>% dplyr::summarise(accu = mean(accuracy_infreq,na.rm = TRUE), seAccu = se(accuracy_infreq),avgCV = mean(coefVar, na.rm = TRUE),seCV = se(coefVar))
ggplot(accuxblocksTOT, aes(x = blockNum,y = accu))+geom_line()+geom_ribbon(aes(x = blockNum, ymin = accu-seAccu, ymax = accu+seAccu), alpha = .5)
ggplot(accuxblocksTOT, aes(x = blockNum,y = accu))+geom_line()+geom_ribbon(aes(x = blockNum, ymin = accu-seAccu, ymax = accu+seAccu), alpha = .5)
ggplot(accuxblocksTOT, aes(x = blockNum,y = avgCV))+geom_line()+geom_ribbon(aes(x = blockNum, ymin = avgCV-seCV, ymax = avgCV+seCV), alpha = .5)
accuxblocksTOT = rlData_noNan %>% group_by(blockNum) %>% filter(!is.na(accuracy_infreq),!is.na(coefVar)) %>% dplyr::summarise(accu = mean(accuracy_infreq,na.rm = TRUE), seAccu = se(accuracy_infreq),avgCV = mean(coefVar, na.rm = TRUE),seCV = se(coefVar))
totCorrels = rlData_noNan %>% group_by(subject) %>% filter(!is.na(accuracy_infreq), !is.na(coefVar)) %>% dplyr::summarise(accuCorrel = cor(blockNum, accuracy_infreq,method = 'spearman'), cvCorrel = cor(blockNum, coefVar,method = 'spearman'))
mean(totCorrels$accuCorrel)
sd(totCorrels$accuCorrel)
mean(totCorrels$cvCorrel)
sd(totCorrels$cvCorrel)
t.test(totCorrels$accuCorrel, mu = 0)
t.test(totCorrels$cvCorrel, mu = 0)
blocknumxrpe_subj = rlData_noNan %>% filter(!is.na(RPE_2alpha))%>% group_by(subject) %>% dplyr::summarise(correl = cor(RPE_2alpha, blockNum))
mean(blocknumxrpe_subj$correl)
mean(rlAccuracyBySubj$pChoseBest)
# RT by subject
rlRTBySubj = rlData %>% dplyr::summarize(avgRT = mean(na.omit(rt)))
ggplot(rlRTBySubj, aes(x = subject, y = avgRT))+geom_bar(stat = "identity")+ggtitle('average RT on RL trials')
# N Rewards by subject
rlAccuracyBySubj = rlData %>% group_by(subject,rewardSign) %>% dplyr::summarize(frequencyReward = n()) %>% filter(rewardSign == 'pos')
ggplot(rlAccuracyBySubj,aes(x = subject, y = frequencyReward))+geom_bar(stat = "identity")+ggtitle('N rewards by subject (i.e. positive point trials)')
# p(chose best)
rlAccuracyBySubj = rlData %>% dplyr::summarize(pChoseBest = mean(na.omit(rlCorr)))
overallChoseBest = mean(rlAccuracyBySubj$pChoseBest,na.rm = TRUE)
overallChoseBest_sd = sd(rlAccuracyBySubj$pChoseBest,na.rm = TRUE)
t.test(rlAccuracyBySubj$pChoseBest,mu = .5)
ggplot(rlAccuracyBySubj, aes(x = subject, y = pChoseBest))+geom_bar(stat = "identity")+geom_hline(yintercept = .5, linetype = 'dashed',color = 'red')+ggtitle('p(chose more valuable bandit by subject)')
mean(rlAccuracyBySubj$pChoseBest)
sd(rlAccuracyBySubj$pChoseBest)
overallChoseBest
overallChoseBest_sd
t.test(rlAccuracyBySubj$pChoseBest,mu = .5)
length(unique(testData$subject))
rlData_noNan
colnames(rlData_noNan)
# Correlation between accuracy on infrequent attention trials and % optimal choice
coefVarFreq = rlData_noNan %>% filter(trialType == 'freq') %>% group_by(subject) %>% dplyr::summarize(avgCV = coefVar)
corrRL = testData %>% filter(trialType == 'rl', !is.na(rlCorr)) %>% group_by(subject) %>% dplyr::summarize(accuracyRL = mean(rlCorr))
coefVarFreq
# Correlation between accuracy on infrequent attention trials and % optimal choice
coefVarFreq = testData %>% filter(trialType == 'freq') %>% group_by(subject) %>% dplyr::summarize(coefVar = sd(rt,na.rm = TRUE)/mean(rt,na.rm =TRUE))
corrRL = testData %>% filter(trialType == 'rl', !is.na(rlCorr)) %>% group_by(subject) %>% dplyr::summarize(accuracyRL = mean(rlCorr))
ggplot(coefVarFreq,aes(x = coefVar, y = corrRL$accuracyRL*100))+geom_point()+geom_smooth(method = 'lm',se = FALSE)+stat_cor(method = "spearman", size = 12)+labs(y = '% Optimal Choice (RL Trials)',x = 'cv(RT on frequent trials)')+theme(axis.title.x = element_text(size = 18, face = 'bold'), axis.title.y = element_text(size = 18, face = 'bold'),axis.text.x = element_text(size = 14),axis.text.y = element_text(size = 14), axis.line = element_line(),panel.grid = element_blank(),panel.background = element_rect(fill = "white", colour = "black"),panel.border = element_rect(fill = NA, colour = "white"))
# Correlation test
shapiro.test(corrRL$accuracyRL) # check if data is normally distributed
shapiro.test(coefVarFreq$coefVar) # check if data is normally distributed
cor.test(coefVarFreq$coefVar,corrRL$accuracyRL, method = "spearman")
# Correlation between accuracy on infrequent attention trials and % optimal choice
corrInfreq = testData %>% filter(trialType == 'infreq') %>% group_by(subject) %>% dplyr::summarize(accuracyInfreq = mean(corr))
# Plot
ggplot(corrInfreq,aes(x = corrInfreq$accuracyInfreq*100, y = corrRL$accuracyRL*100))+geom_point()+geom_smooth(method = 'lm',se = FALSE)+stat_cor(method = "spearman", size = 12)+labs(y = '% Optimal Choice (RL Trials)',x = '% Correct (Infrequent Attention Trials)')+scale_y_continuous(expand = c(0,0), limits=c(0,100))+theme(axis.title.x = element_text(size = 18, face = 'bold'), axis.title.y = element_text(size = 18, face = 'bold'),axis.text.x = element_text(size = 14),axis.text.y = element_text(size = 14), axis.line = element_line(),panel.grid = element_blank(),panel.background = element_rect(fill = "white", colour = "black"),panel.border = element_rect(fill = NA, colour = "white"))
# Correlation test
shapiro.test(corrInfreq$accuracyInfreq) # check if data is normally distributed
cor.test(corrInfreq$accuracyInfreq,corrRL$accuracyRL, method = "spearman")
# set up workspace
rm(list=ls(all=TRUE))
# setwd("~/Box/ACTlab_projects/JT_SARL/3 Data/subjData_SONA_freq_v3")
# datadir = "~/Box/ACTlab_projects/JT_SARL/3 Data/subjData_SONA_freq_v3"
setwd("~/Library/CloudStorage/Box-Box/ACTlab_projects/JT_SARL/SARL/3 Data/subjData_prolific_replication_v2_5.25")
datadir = "~/Library/CloudStorage/Box-Box/ACTlab_projects/JT_SARL/SARL/3 Data/subjData_prolific_replication_v2_5.25/data"
# load libraries
library(ggplot2)
library(ggpubr)
library(reshape2)
library(dplyr)
library(tidyr)
library(tidyverse)
library(itsadug)
library(RColorBrewer)
library(knitr)
library(extrafont)
library(fs)
library(fabricatr)
library(rstatix)
library(lme4)
library(lmerTest)
library(cocor)
library(pracma)
# define se function
se <- function(x) sqrt(var(x)/length(x))
nanMax = function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA)
nanMin = function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA)
# read in data
flag = 1 #1 = compile all the data, 2 = read in the already ready files
if(flag == 1){
file_paths = fs::dir_ls(datadir)
compiledData = data.frame()
for (i in seq_along(file_paths)){
newSubjData = read_csv(file = file_paths[[i]])
compiledData = rbind(compiledData, newSubjData)
}
# clean up data
compiledData$rt = as.numeric(compiledData$rt)
compiledData$time_elapsed = as.numeric(compiledData$time_elapsed)
compiledData$key_press = as.numeric(compiledData$key_press)
compiledData$stim = as.numeric(compiledData$stim)
compiledData$corrresp = as.numeric(compiledData$corrresp)
# sort data into prac and test
pracData = filter(compiledData, phase == "prac")
testData = filter(compiledData, phase == "test")
testData$switch = NA
testData$rlCorr = NA
testData$prevReward = NA
testData = testData %>% filter(trialType %in% c('freq','infreq','rl'))
# get some variables
prolificNums = unique(testData$subject)
subjNums_all = unique(testData$subject)
N_all = length(prolificNums)
nRLTrials = 76
chancePerformance = .5 #maybe add the actual formula at some point
# add other info
# rL corr or not
counter = 1
for (ai in 1:N_all){
for(bi in 1:nanMax(testData$rlNum)){
idx = which(testData$rlNum == bi & testData$subject == subjNums_all[ai] & testData$trialType == "rl")
if(!is_empty(idx)){
if(is.na(testData$key_press[idx])){
testData$rlCorr[idx] = NA
}else if(min(c(testData$bandOneVal[idx], testData$bandTwoVal[idx])) == testData$reward[idx]){
testData$rlCorr[idx] = 0
}else if(max(c(testData$bandOneVal[idx], testData$bandTwoVal[idx])) == testData$reward[idx]){
testData$rlCorr[idx] = 1
}
testData$rlType[idx-1] = "preRL"
testData$rlType[idx] = 'rl'
}}
for(ci in 2:nanMax(testData$rlNum)){
idxCurr = which(testData$rlNum == ci & testData$subject == subjNums_all[ai] & testData$trialType == "rl")
idxPrev = which(testData$rlNum == (ci-1) & testData$subject == subjNums_all[ai] & testData$trialType == "rl")
if(!is_empty(idxCurr) & !is_empty(idxPrev)){
if(idxCurr ==2){
testData$switch[1] = NA
}else if(testData$shapeChosen[idxCurr] =='too slow'){
testData$switch[idxCurr] = NA
}else if(testData$shapeChosen[idxCurr]==testData$shapeChosen[idxPrev]){
testData$switch[idxCurr] = 0
}else{
testData$switch[idxCurr] = 1
if(is.na(testData$key_press[idxPrev])){
testData$switch[idxCurr] = NA
}}
}
if(ci < nanMax(testData$rlNum)){
idxSubjBlock = which(testData$subject == subjNums_all[ai] & testData$blockNum == ci)
testData$prevReward[idxSubjBlock] = testData$reward[which(testData$subject == subjNums_all[ai] & testData$rlNum == ci-1)]
}
}
}
# Add in reward information
testData$rew = NA
for(ai in 1:N_all){
subj = subjNums_all[ai]
for(bi in 1:(nRLTrials-1)){
if(is.na(testData$reward[which(testData$subject == subj & testData$rlNum == bi)])) {
testData$rew[testData$subject == subj & testData$blockNum==(bi+1)] = 'noresp'
}else if(testData$reward[which(testData$subject == subj & testData$rlNum == bi)]<=0){
testData$rew[testData$subject == subj & testData$blockNum==(bi+1)] = 'unrew'
}else if(testData$reward[which(testData$subject == subj & testData$rlNum == bi)]> 0){
testData$rew[testData$subject == subj & testData$blockNum==(bi+1)] = 'rew'
}
}
}
testData$rewardSign = NA
testData$rewardSign[testData$reward > 0] = 'pos'
testData$rewardSign[testData$reward <= 0] = 'neg'
# load in RPEs for 2 alpha model generated by matlab script
RPEs = read.csv('~/Library/CloudStorage/Box-Box/ACTlab_projects/JT_SARL/SARL/3 Data/subjData_prolific_replication_v2_5.25/RPE1a_prolificRep_6.8.23.csv')
RPEs_two = read.csv('~/Library/CloudStorage/Box-Box/ACTlab_projects/JT_SARL/SARL/3 Data/subjData_prolific_replication_v2_5.25/RPE2a_prolificRep_6.8.23.csv')
modelInfo = read.csv('~/Library/CloudStorage/Box-Box/ACTlab_projects/JT_SARL/SARL/3 Data/subjData_prolific_replication_v2_5.25/modelingInfo_6.8.23.csv')
# # add RPE columns
testData$RPE_1alpha = NA
testData$RPE_2alpha = NA
# # add columns for other modeling info
testData$alphaOne = NA
testData$betaOne = NA
testData$aicOne = NA
testData$bicOne = NA
testData$alphaPos = NA
testData$alphaNeg = NA
testData$betaTwo = NA
testData$aicTwo = NA
testData$bicTwo = NA
modelSubjs = colnames(RPEs)# just do this for the included subjects
N_model = length(modelSubjs)
# add RPEs to the main spreadsheet
for(ai in 1:N_model){
subj = modelSubjs[ai]
testData$alphaOne[testData$subject == subj] = modelInfo[[subj]][1]
testData$betaOne[testData$subject == subj] = modelInfo[[subj]][2]
testData$aicOne[testData$subject == subj] = modelInfo[[subj]][3]
testData$bicOne[testData$subject == subj] = modelInfo[[subj]][4]
testData$alphaPos[testData$subject == subj] = modelInfo[[subj]][5]
testData$alphaNeg[testData$subject == subj] = modelInfo[[subj]][6]
testData$betaTwo[testData$subject == subj] = modelInfo[[subj]][7]
testData$aicTwo[testData$subject == subj] = modelInfo[[subj]][8]
testData$bicTwo[testData$subject == subj] = modelInfo[[subj]][9]
for(bi in 2:nanMax(testData$rlNum)){
idxSubjBlock = which(testData$subject == subj & testData$blockNum == bi)
testData$RPE_1alpha[idxSubjBlock] = RPEs[[subj]][bi-1]
testData$RPE_1alpha[nanMin(idxSubjBlock)-1] = RPEs[[subj]][bi-1]
testData$RPE_2alpha[idxSubjBlock] = RPEs_two[[subj]][bi-1]
testData$RPE_2alpha[nanMin(idxSubjBlock)-1] = RPEs_two[[subj]][bi-1]
}
}
testData_all = testData
demoInfo = read.csv('~/Library/CloudStorage/Box-Box/ACTlab_projects/JT_SARL/SARL/3 Data/subjData_prolific_replication_v2_5.25/SARL_prolificRep_demoInfo.csv')
testData$age = NA
testData$sex = NA
prolificIDs = unique(testData$prolificID)
for(si in prolificIDs){
subjAge = demoInfo$Age[demoInfo$Participant.id == si]
subjSex = demoInfo$Sex[demoInfo$Participant.id == si]
testData$age[testData$prolificID == si] = subjAge
testData$sex[testData$prolificID == si] = subjSex
}
testData$bandOneSign = NA
testData$bandOneSign[testData$bandOneVal > 0] = 'pos'
testData$bandOneSign[testData$bandOneVal <= 0] = 'neg'
testData$bandTwoSign = NA
testData$bandTwoSign[testData$bandTwoVal > 0] = 'pos'
testData$bandTwoSign[testData$bandTwoVal <= 0] = 'neg'
}else{
testData = read_csv("~/Library/CloudStorage/Box-Box/ACTlab_projects/JT_SARL/SARL/4 Analyses/OrganizedCode/Expt2/SARL_Expt2_rawdata_n146_final.csv")
subjNums_all = unique(testData$subject)
N_all = length(subjNums_all)
nRLTrials = 76
chancePerformance =.5
}
# Save full data without exclusions just in case
testData_noExclusions = testData
# Find the subjects that are worse than 75% on frequent trials
ExcludedSubjs_freqaccu = testData_noExclusions %>% filter(trialType == 'freq') %>% group_by(subject) %>% dplyr::summarise(accu = mean(corr, na.rm = TRUE)) %>% filter(accu < .75)
ggplot(ExcludedSubjs_freqaccu, aes(x = subject, y = accu)) + geom_bar(stat = 'identity')
sprintf('N subjects excluded for accuracy on frequent trials: %d', length(ExcludedSubjs_freqaccu$subject))
c(ExcludedSubjs_freqaccu$subject)
# Find subjects that got less that 75% rl trials (57 trials)
ExcludedSubjs_rlresp = testData_noExclusions %>% filter(trialType == 'rl') %>% group_by(subject,key_press) %>% dplyr::summarise(counts = n()) %>% filter(is.na(key_press)) %>% filter(counts > floor(nRLTrials*.25))
ggplot(ExcludedSubjs_rlresp, aes(x = subject, y = counts)) + geom_bar(stat = 'identity')
sprintf('N subjects excluded for not responding on RL trials: %d', length(ExcludedSubjs_rlresp$subject))
c(ExcludedSubjs_rlresp$subject)
# Filter out subjects that just did one response on over 90% of trials
ExcludedSubjs_rloneresp = testData_noExclusions %>% filter(trialType == 'rl', !is.na(key_press)) %>% group_by(subject,key_press) %>% dplyr::summarise(counts = n()) %>% filter(counts > floor(nRLTrials*.9))
ggplot(ExcludedSubjs_rloneresp, aes(x = subject, y = counts)) + geom_bar(stat = 'identity')
sprintf('N subjects excluded for repeatedly making one response: %d', length(ExcludedSubjs_rloneresp$subject))
c(ExcludedSubjs_rloneresp$subject)
# Compile list of subs
ExcludedSubs = unique(c(ExcludedSubjs_freqaccu$subject,ExcludedSubjs_rlresp$subject,ExcludedSubjs_rloneresp$subject))
# filter out their data
testData = testData_noExclusions %>% filter(!(subject %in% ExcludedSubs))
subjNums = unique(testData$subject)
N = length(subjNums)
# Add in the quartiles for reward values
testData$rewBins = NA
for(ai in 1:N){
subjRLidx = which(!is.na(testData$reward) & testData$subject == subjNums[ai] & testData$trialType == 'rl')
quants = split_quantile(testData$reward[subjRLidx],4)
for(bi in 1:length(quants)){
testData$rewBins[subjRLidx[bi]] = quants[bi]
}
}
sprintf('N subjects BEFORE EXCLUSIONS: %d', length(unique(testData_noExclusions$subject)))
sprintf('N subjects AFTER EXCLUSIONS: %d', length(unique(testData$subject)))
rlData = testData %>% filter(trialType == "rl") %>% group_by(subject)
if(flag == 1){# make an array with the values you want for each block (subject, RPE, meanRT on freq, sdRT on freq, accuracy on infreq)
# start with the rlData
rlData$meanRT_freq = NA
rlData$sdRT_freq = NA
rlData$accuracy_infreq = NA
rlData$threeFreq = NA
rlData$accuracy_infreq_prev = NA
rlData$coefVar = NA
rlData$coefVar_prev = NA
for(ai in 1:N){
for(bi in 2:max(testData$rlNum,na.rm = TRUE)){
idxRL = which(testData$subject == subjNums[ai]& testData$blockNum == bi & testData$trialType == 'rl')
idxRel_freq = which(testData$subject == subjNums[ai]& testData$blockNum == bi & testData$trialType == 'freq')
idxRel_infreq = which(testData$subject == subjNums[ai]& testData$blockNum == bi & testData$trialType == 'infreq')
idxPrev_freq = which(testData$subject == subjNums[ai]& testData$blockNum == (bi-1) & testData$trialType == 'freq')
idxPrev_infreq = which(testData$subject == subjNums[ai]& testData$blockNum == (bi-1) & testData$trialType == 'infreq')
idxPrevThree = tail(idxPrev_freq,3)
avgRT = mean(testData$rt[idxRel_freq],na.rm = TRUE)
sdRT = sd(testData$rt[idxRel_freq],na.rm = TRUE)
attAccuracy = mean(testData$corr[idxRel_infreq],na.rm = TRUE)
threeRT = mean(testData$rt[idxPrevThree],na.rm = TRUE)
attAccuracy_prev = mean(testData$corr[idxPrev_infreq],na.rm = TRUE)
CV = sdRT/avgRT
avgRT_prev = mean(testData$rt[idxPrev_freq],na.rm = TRUE)
sdRT_prev = sd(testData$rt[idxPrev_freq],na.rm = TRUE)
CV_prev = sdRT_prev/avgRT_prev
rlData$meanRT_freq[which(rlData$blockNum == bi-1 & rlData$subject == subjNums[ai])] = avgRT
rlData$sdRT_freq[which(rlData$blockNum == bi-1 & rlData$subject == subjNums[ai])] = sdRT
rlData$accuracy_infreq[which(rlData$blockNum == bi-1 & rlData$subject == subjNums[ai])] = attAccuracy
rlData$threeFreq[which(rlData$blockNum == bi-1 & rlData$subject == subjNums[ai])] = threeRT
rlData$accuracy_infreq_prev[which(rlData$blockNum == bi-1 & rlData$subject == subjNums[ai])] = attAccuracy_prev
rlData$coefVar[which(rlData$blockNum == bi-1 & rlData$subject == subjNums[ai])] = CV
rlData$coefVar_prev[which(rlData$blockNum == bi-1 & rlData$subject == subjNums[ai])] = CV_prev
}
}
rlData_noNan= rlData %>% filter(!is.na(RPE_1alpha)) %>% group_by(subject) %>% mutate(quartiles_one = split_quantile(RPE_1alpha,4))
rlData_noNan= rlData_noNan %>% group_by(subject) %>% mutate(quartiles = split_quantile(RPE_2alpha,4))
rlData_noNan$age = as.numeric(rlData_noNan$age)
demoInfo_summary = rlData_noNan %>% group_by(subject) %>% dplyr::summarise(age = unique(age), sex = unique(sex))
mean(demoInfo_summary$age)
sd(demoInfo_summary$age)
sum(demoInfo_summary$sex == 'Female')
# add columns for zsccored reward and zscored RPEs
rlData_noNan$RPE_1alpha_z = NA
rlData_noNan$RPE_2alpha_z = NA
rlData_noNan$reward_z = NA
rlData_noNan= rlData_noNan %>% group_by(subject) %>% mutate(RPE_1alpha_z = scale(RPE_1alpha, center = TRUE, scale = TRUE),RPE_2alpha_z = scale(RPE_2alpha, center = TRUE, scale = TRUE),reward_z = scale(reward, center = TRUE, scale = TRUE),accuracy_infreq_z = scale(accuracy_infreq, center = TRUE, scale = TRUE),accuracy_infreq_prev_z = scale(accuracy_infreq_prev, center = TRUE, scale = TRUE),coefVar_z = scale(coefVar, center = TRUE, scale = TRUE),coefVar_prev_z = scale(coefVar_prev, center = TRUE, scale = TRUE))
rlData_noNan$rpeSign = NA
rlData_noNan$rpeSign[rlData_noNan$RPE_2alpha <= 0] = 'neg'
rlData_noNan$rpeSign[rlData_noNan$RPE_2alpha >0] = 'pos'
rlData_noNan$rewardSign_num = NA
rlData_noNan$rewardSign_num[rlData_noNan$rewardSign == 'neg'] = 0
rlData_noNan$rewardSign_num[rlData_noNan$rewardSign == 'pos'] = 1
rlData_noNan$rpeSign_num = NA
rlData_noNan$rpeSign_num[rlData_noNan$rpeSign == 'pos'] = 1
rlData_noNan$rpeSign_num[rlData_noNan$rpeSign == 'neg'] = 0
}else{
rlData_noNan = read_csv("~/Library/CloudStorage/Box-Box/ACTlab_projects/JT_SARL/SARL/3 Data/subjData_prolific_replication_v2_5.25/SARL_prolificRep_rlData_noNan_081123.csv")
}
